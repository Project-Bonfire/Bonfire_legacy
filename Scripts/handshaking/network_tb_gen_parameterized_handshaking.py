# Copyright (C) 2016 Siavoosh Payandeh Azad

from math import ceil, log
import random

# -D [size]: sets the size of the network, it can be powers of two
# -Rand: generates random traffic patterns

import sys

if '--help' in sys.argv[1:]:
  print "\t-D [network size]: makes a test bench for network of [size]X[size]. Size can be "
  print "\t                   only multiples of two. default value is 4."
  print "\t-DW [data_width]: sets the data width of the network!"
  print "\t[-Rand/-BR] [PIR]: Uses [Rand]om traffic pattern generator with packet injection rate equal to PIR"
  print "\t                   or Uses [B]it[R]eversal traffic pattern generator with packet injection rate equal to PIR"
  print "\t                   default case is repeatative packets being sent from source to same destination"
  print "\t-FI: adds control for fault injector units in the network"
  print "\t-NI [NI depth]: adds network interface to each router's local port"
  print "\t-o: specifies the name and path of the output file. default path is current folder!"
  print "\t-PS [min packet size] [max packet size]: specifies packet size. default min value is 3 and defualt max value is 8."
  print "\t-sim: specifies the length of simulation in clock cycles. which at this time the packet generators will stop sending packets."
  print "\t**Example: python network_tb_gen_parameterized.py -D 2 -FI"
  print "\t           generates a testbench for a 2X2 network that has fault injector controller and uses "
  print "\t           non-random traffic patterns with random stop time"
  print "\t**Example2: python network_tb_gen_parameterized.py -D 2 -Rand 0.005 -PS 3 3 -sim 10000  "
  print "\t           generates a testbench for a 2X2 network which uses random traffic pattern generator with PIR of 0.005 and fixed"
  print "\t           packet size of 3 and sends packets untill 10000 ns"
  sys.exit()

if '-D'  in sys.argv[1:]:
  network_dime = int(sys.argv[sys.argv.index('-D')+1])
else:
  network_dime = 4

if '-DW' in sys.argv[1:]:
  data_width = int(sys.argv[sys.argv.index('-DW')+1])
  if data_width % 2 != 0:
    raise ValueError("wrong data width. please choose powers of 2. for example 32!")
else:
  data_width = 32

if '-Rand'  in sys.argv[1:]:
  random_dest = True
  PIR = float(sys.argv[sys.argv.index('-Rand')+1])
  frame_size = int(ceil(1.0/PIR))
else:
  random_dest = False

if '-BR'  in sys.argv[1:]:
  bit_reversal = True
  PIR = float(sys.argv[sys.argv.index('-BR')+1])
  frame_size = int(ceil(1.0/PIR))
else:
  bit_reversal = False

if '-FI'  in sys.argv[1:]:
  fi_addres_width = int(ceil(log(data_width,2)))
  add_FI = True
else:
  fi_addres_width = None
  add_FI = False

if '-NI'  in sys.argv[1:]:
  add_NI = True
  NI_depth = int(sys.argv[sys.argv.index('-NI')+1])
else:
  add_NI = False
  NI_depth = None

if random_dest and bit_reversal:
  raise ValueError("Can not accept multiple traffic patterns at the same time...")

if '-sim'  in sys.argv[1:]:
  got_finish_time = True
  sim_finish_time = int(sys.argv[sys.argv.index('-sim')+1])
else:
  got_finish_time = False
  sim_finish_time = None

if '-PS'  in sys.argv[1:]:
  get_packet_size = True
  packet_size_min = int(sys.argv[sys.argv.index('-PS')+1])
  packet_size_max = int(sys.argv[sys.argv.index('-PS')+2])
else:
  get_packet_size = False
  packet_size_min = 3
  packet_size_max = 8



file_name= 'tb_network'
if random_dest:
  file_name += '_rand'
elif bit_reversal:
  file_name += '_br'
if add_FI:
  file_name += '_FI'

if '-o'  in sys.argv[1:]:
  file_path = sys.argv[sys.argv.index('-o')+1]
  if ".vhd" not in file_path:
      raise ValueError("wrong file extention. only vhdl files are accepted!")
else:
  file_path = file_name+'_'+str(network_dime)+"x"+str(network_dime)+'.vhd'


noc_file = open(file_path, 'w')


noc_file.write("--Copyright (C) 2016 Siavoosh Payandeh Azad\n")
noc_file.write("------------------------------------------------------------\n")
noc_file.write("-- This file is automatically generated!\n")
noc_file.write("-- Here are the parameters:\n")
noc_file.write("-- \t network size x:"+str(network_dime)+"\n")
noc_file.write("-- \t network size y:"+str(network_dime)+"\n")
noc_file.write("------------------------------------------------------------\n\n")

noc_file.write("library ieee;\n")
noc_file.write("use ieee.std_logic_1164.all;\n")
noc_file.write("use IEEE.STD_LOGIC_ARITH.ALL;\n")
noc_file.write("use IEEE.STD_LOGIC_UNSIGNED.ALL;\n")
noc_file.write("use work.TB_Package.all;\n\n")
noc_file.write("USE ieee.numeric_std.ALL; \n")
noc_file.write("use IEEE.math_real.\"ceil\";\n")
noc_file.write("use IEEE.math_real.\"log2\";\n\n")

noc_file.write("entity tb_network_"+str(network_dime)+"x"+str(network_dime)+" is\n")

noc_file.write("end tb_network_"+str(network_dime)+"x"+str(network_dime)+"; \n")


noc_file.write("\n\n")
noc_file.write("architecture behavior of tb_network_"+str(network_dime)+"x"+str(network_dime)+" is\n\n")

noc_file.write("-- Declaring network component\n")

string_to_print = ""
string_to_print += "component network_"+str(network_dime)+"x"+str(network_dime)+" is\n"
if add_NI:
  string_to_print += " generic (DATA_WIDTH: integer := 32; NI_DEPTH: integer:= 16);\n"
else:
  string_to_print += " generic (DATA_WIDTH: integer := 32);\n"
string_to_print +=  " port (reset: in  std_logic; \n"
string_to_print += "\tclk: in  std_logic; \n"
for i in range(network_dime*network_dime):
  string_to_print += "\t--------------\n"
  string_to_print += "\tRX_L_"+str(i)+": in std_logic_vector (DATA_WIDTH-1 downto 0);\n"
  string_to_print += "\tRTS_L_"+str(i)+", CTS_L_"+str(i)+": out std_logic;\n"
  string_to_print += "\tDRTS_L_"+str(i)+", DCTS_L_"+str(i)+": in std_logic;\n"
  string_to_print += "\tTX_L_"+str(i)+": out std_logic_vector (DATA_WIDTH-1 downto 0);\n\n"

if add_FI:
  string_to_print += "\t--fault injector signals\n"
  for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_y != network_dime-1:
      string_to_print += "\tFI_Add_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i) +\
                     "_"+str(i+network_dime)+": in std_logic_vector(integer(ceil(log2(real(DATA_WIDTH))))-1 downto 0);\n"
      string_to_print += "\tsta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +\
                         ", sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+": in std_logic;\n\n"
  for i in range(0, network_dime*network_dime):
      node_x = i % network_dime
      node_y = i / network_dime
      if node_x != network_dime -1 :
          string_to_print += "\tFI_Add_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+1) +\
                             ": in std_logic_vector(integer(ceil(log2(real(DATA_WIDTH))))-1 downto 0);\n"
          string_to_print += "\tsta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +\
                             ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+": in std_logic;\n\n"

noc_file.write(string_to_print[:len(string_to_print)-3])
noc_file.write("\n            ); \n")
noc_file.write("end component; \n")

noc_file.write("\n")
noc_file.write("-- generating bulk signals...\n")
for i in range(0, network_dime*network_dime):
    noc_file.write("\tsignal RX_L_"+str(i)+", TX_L_"+str(i)+":  std_logic_vector ("+str(data_width-1)+" downto 0);\n")
    noc_file.write("\tsignal RTS_L_"+str(i)+", DRTS_L_"+str(i)+", CTS_L_"+str(i)+", DCTS_L_"+str(i) + ": std_logic;\n")
    noc_file.write("\t--------------\n")
noc_file.write("\n")
if add_FI:
  noc_file.write("\t--fault injector signals\n")
  for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_y != network_dime-1:
      noc_file.write("\tsignal FI_Add_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i) +
                     "_"+str(i+network_dime)+": std_logic_vector(integer(ceil(log2(real("+str(data_width-1)+"))))-1 downto 0) := (others=>'0');\n")
      noc_file.write("\tsignal sta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +
                         ", sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+": std_logic :='0';\n\n")
  for i in range(0, network_dime*network_dime):
      node_x = i % network_dime
      node_y = i / network_dime
      if node_x != network_dime -1 :
          noc_file.write("\tsignal FI_Add_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+1) +
                         ": std_logic_vector(integer(ceil(log2(real("+str(data_width-1)+"))))-1 downto 0):= (others=>'0');\n")
          noc_file.write("\tsignal sta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                          ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+": std_logic :='0';\n\n")



noc_file.write(" constant clk_period : time := 1 ns;\n")
noc_file.write("signal reset,clk: std_logic :='0';\n")

noc_file.write("\n")
noc_file.write("begin\n\n")


noc_file.write("   clk_process :process\n")
noc_file.write("   begin\n")
noc_file.write("        clk <= '0';\n")
noc_file.write("        wait for clk_period/2;   \n")
noc_file.write("        clk <= '1';\n")
noc_file.write("        wait for clk_period/2; \n")
noc_file.write("   end process;\n")
noc_file.write("\n")
noc_file.write("reset <= '1' after 1 ns;\n")

noc_file.write("-- instantiating the network\n")

string_to_print = ""
if add_NI:
  string_to_print += "NoC: network_"+str(network_dime)+"x"+str(network_dime)+" generic map (DATA_WIDTH  => "+str(data_width)+", NI_DEPTH => "+str(NI_depth)+")\n"
else:
  string_to_print += "NoC: network_"+str(network_dime)+"x"+str(network_dime)+" generic map (DATA_WIDTH  => "+str(data_width)+")\n"

string_to_print += "PORT MAP (reset, clk, \n"
for i in range(network_dime*network_dime):
  string_to_print += "\tRX_L_"+str(i)+", RTS_L_"+str(i)+", CTS_L_"+str(i)+", DRTS_L_"+str(i)+", DCTS_L_"+str(i)+", "
  string_to_print += "TX_L_"+str(i)+",\n"


if add_FI:
  string_to_print += "\t--fault injector signals\n"
  string_to_print +="\t--vertical signals\n"
  for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_y != network_dime-1:
      string_to_print += "\tFI_Add_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+network_dime)+", "
      string_to_print += "sta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +\
                       ", sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+",\n"

  string_to_print +="\t--horizontal signals\n"
  for i in range(0, network_dime*network_dime):
      node_x = i % network_dime
      node_y = i / network_dime
      if node_x != network_dime -1 :
          string_to_print += "\tFI_Add_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+1) + ", "
          string_to_print += "sta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +\
                             ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+",\n"

noc_file.write(string_to_print[:len(string_to_print)-2])
noc_file.write("\n            ); \n")

noc_file.write("\n")
noc_file.write("-- connecting the packet generators\n")
if random_dest:
  for i in range(0, network_dime*network_dime):

    random_start = random.randint(3, 50)
    if got_finish_time:
      random_end = sim_finish_time
    else:
      random_end = random.randint(random_start, 200)


    noc_file.write("gen_random_packet("+str(frame_size)+", "+str(i)+", "+str(random_start)+", " +str(packet_size_min)+", " +str(packet_size_max)+", " +
                    str(random_end)+" ns, clk, CTS_L_"+str(i)+", DRTS_L_"+str(i)+", RX_L_"+str(i)+");\n")
elif bit_reversal:
  for i in range(0, network_dime*network_dime):

    random_start = random.randint(3, 50)
    if got_finish_time:
      random_end = sim_finish_time
    else:
      random_end = random.randint(random_start, 200)

    noc_file.write("gen_bit_reversed_packet("+str(frame_size)+", "+str(i)+", "+str(random_start)+", " +str(network_dime)+ ", " +str(packet_size_min)+", " +str(packet_size_max)+", " +
                    str(random_end)+" ns, clk, CTS_L_"+str(i)+", DRTS_L_"+str(i)+", RX_L_"+str(i)+");\n")
else:
  for i in range(0, network_dime*network_dime):
    random_node = random.randint(0, network_dime*network_dime-1)
    while i == random_node:
      random_node = random.randint(0, (network_dime*network_dime)-1)
    random_length  = random.randint(3, 10)
    random_start = random.randint(3, 50)
    if got_finish_time:
      random_end = sim_finish_time
    else:
      random_end = random.randint(random_start, 200)

    noc_file.write("gen_packet("+str(random_length)+", "+str(i)+", "+str(random_node)+", 1, "+str(random_start) +
                    ", "+str(random_end)+" ns, clk, CTS_L_"+str(i)+", DRTS_L_"+str(i)+", RX_L_"+str(i)+");\n")
noc_file.write("\n")
noc_file.write("-- connecting the packet receivers\n")
noc_file.write("-- Arguments are:\n")
noc_file.write("--      data_width, inital delay, node_id, clk, DCTS, RTS, TX\n")
for i in range(0, network_dime*network_dime):
  noc_file.write("get_packet("+str(data_width)+", 5, "+str(i)+", clk, DCTS_L_"+str(i)+", RTS_L_"+str(i)+", TX_L_"+str(i)+");\n")


noc_file.write("\n")
if add_FI:
  noc_file.write("-- connecting the fault generators\n")
  for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_x != network_dime -1 :
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i) +
                     ", FI_Add_"+str(i+1)+"_"+str(i)+", "+str(random_delay)+", "+ str(seed_1)+", "+ str(seed_2)+");\n")
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                     ", FI_Add_"+str(i)+"_"+str(i+1)+", "+str(random_delay)+", "+ str(seed_1)+", "+ str(seed_2)+");\n")
    if node_y != network_dime-1:
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime) +
                     "_"+str(i)+", FI_Add_"+str(i+network_dime)+"_"+str(i)+", "+str(random_delay)+", "+ str(seed_1)+", "+ str(seed_2)+");\n")
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +
                     ", FI_Add_"+str(i)+"_"+str(i+network_dime)+", "+str(random_delay)+", "+ str(seed_1)+", "+ str(seed_2)+");\n")

noc_file.write("end;\n")
